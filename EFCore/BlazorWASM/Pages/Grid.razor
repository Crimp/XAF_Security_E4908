@page "/grid"
@inject HttpClient HttpClient;
@inject IJSRuntime Js;
@using Simple.OData.Client
@using System.Collections
@using DevExpress.Data.Filtering
@using DevExpress.Data.Filtering.Helpers
<DxButton SizeMode="SizeMode.Small" Text="Archive" RenderStyle="ButtonRenderStyle.Secondary" Enabled="Archive" Click="OnArchive" />
<DxButton SizeMode="SizeMode.Small" Text="Shape" RenderStyle="ButtonRenderStyle.Secondary" Click="OnShape" />
<DxGrid  Data="@Data" CssClass="mw-1100" KeyFieldName="PostId" ShowFilterRow="true" @bind-SelectedDataItems="SelectedDataItems" SelectionMode="GridSelectionMode.Single"
         EditModelSaving="OnSaving" DataItemDeleting="OnDeleting" EditMode="GridEditMode.EditRow" EditorRenderMode="GridEditorRenderMode.Integrated">
    <Columns>
        <DxGridCommandColumn Width="160px" Visible="AllowEdit"/>
        <DxGridSelectionColumn Width="104px" />
        <DxGridDataColumn Caption="Title" FieldName="Title">
            <CellEditTemplate>
                @{ var post = (Post)context.EditContext.Model;}
                <DxTextBox @bind-Text="@post.Title"></DxTextBox>
            </CellEditTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn Caption="Content" FieldName="Content">
            <CellEditTemplate>
                @{ var post = (Post)context.EditContext.Model; }
                <DxTextBox @bind-Text="@post.Content"></DxTextBox>
            </CellEditTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="PostId" Caption="Photo" AllowSort="false" Width="90px" MinWidth="100" TextAlignment="GridTextAlignment.Center">
            <CellDisplayTemplate><button class="btn btn-link" @onclick="() => ShowPhoto((int)context.Value)">Photo</button></CellDisplayTemplate>
        </DxGridDataColumn>
    </Columns>
</DxGrid>
<DxPopup HeaderText="Archive" @bind-Visible="Archived" BodyText="This post is saved to disk"/>
<DxPopup HeaderText="Photo" @bind-Visible="ShowingPhoto">
    <BodyContentTemplate>
        <img src="@_imageDataUrl" />
    </BodyContentTemplate>
</DxPopup>


@code {
    IReadOnlyList<object>? SelectedDataItems { get; set; }
    CustomDataSource? Data { get; set; }
    ODataClient Client { get; set; } = null!;
    bool Archive => SelectedDataItems != null && SelectedDataItems.Any();
    bool Archived { get; set; }
    bool ShowingPhoto { get; set; }
    public bool AllowEdit { get; set; }

    protected override async Task OnInitializedAsync() {
        var settings = new ODataClientSettings(new Uri($"{HttpClient.BaseAddress.AbsoluteUri}odata"));
        settings.BeforeRequest += message => message.Headers.Authorization = HttpClient.DefaultRequestHeaders.Authorization;
        Client = new ODataClient(settings);
        Data = new CustomDataSource(Client);
        AllowEdit = await HttpClient.GetFromJsonAsync<bool>("CustomEndpoint/CanCreate?typename=Post");
        await base.OnInitializedAsync();
    }

    private async Task OnSaving(GridEditModelSavingEventArgs e) {
        if (e.IsNew) {
            await Client.For<Post>().Set(e.EditModel).InsertEntryAsync();
        }
        else {
            await Client.For<Post>().Key(((Post)e.EditModel).PostId)
                .Set(e.EditModel).UpdateEntryAsync();
        }
    }

    private async Task OnDeleting(GridDataItemDeletingEventArgs e) 
        => await Client.For<Post>().Key(((Post)e.DataItem).PostId).DeleteEntryAsync();

    private async Task OnArchive(MouseEventArgs arg) 
        => Archived = (await HttpClient.PostAsJsonAsync("CustomEndPoint/Archive", 
            SelectedDataItems!.Cast<Post>().First())).IsSuccessStatusCode;

    private async Task ShowPhoto(int contextValue) {
        _imageDataUrl = $"data:image/jpg+xml;base64,{Convert.ToBase64String(await HttpClient.GetByteArrayAsync($"CustomEndPoint/AuthorPhoto/{contextValue}"))}";
        ShowingPhoto = true;
    }

    private string _imageDataUrl="";

    private async Task OnShape() 
        => await Js.InvokeAsync<object>("saveAsFile", "Report.pdf", Convert.ToBase64String(
            await HttpClient.GetByteArrayAsync("report/DownloadByName(Post Report)")));

    public class CustomDataSource : GridCustomDataSource {
        private readonly ODataClient _client;

        public CustomDataSource(ODataClient client) 
            => _client = client;

        public override async Task<int> GetItemCountAsync(GridCustomDataSourceCountOptions options, CancellationToken cancellationToken) 
            => await ApplyFiltering(options.FilterCriteria, _client.For<Post>()).Count().FindScalarAsync<int>(cancellationToken);

        public override async Task<IList> GetItemsAsync(GridCustomDataSourceItemsOptions options, CancellationToken cancellationToken) {
            var filteredClient = ApplyFiltering(options.FilterCriteria, _client.For<Post>().Top(options.Count).Skip(options.StartIndex));
            var sortedClient = ApplySorting(options, filteredClient);
            return (await sortedClient.FindEntriesAsync(cancellationToken)).ToList();
        }

        private static IBoundClient<Post> ApplyFiltering(CriteriaOperator criteria, IBoundClient<Post> boundClient) 
            => !criteria.ReferenceEqualsNull() ?
                boundClient.Filter($"{criteria}".Replace("[", "").Replace("]", "")) : boundClient;

        private static IBoundClient<Post> ApplySorting(GridCustomDataSourceItemsOptions options, IBoundClient<Post> boundClient) 
            => options.SortInfo.Any() ? boundClient.OrderBy(options.SortInfo
                .Where(info => !info.DescendingSortOrder).Select(info => info.FieldName).ToArray())
                .OrderByDescending(options.SortInfo
                    .Where(info => info.DescendingSortOrder).Select(info => info.FieldName).ToArray()) : boundClient;
    }

    

}